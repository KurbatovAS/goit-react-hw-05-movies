{"version":3,"file":"static/js/732.5b9f60e4.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","hooks/useFetchMovieDetails.js","hooks/useFetchTrendingMovies.js","hooks/useFetchSearchMovies.js","hooks/useFetchCast.js","hooks/useFetchReviews.js","services/themovieAPI.js","components/RenderReview/RenderReview.styled.js","components/RenderReview/RenderReview.js","views/ReviewsView/ReviewsView.styled.js","views/ReviewsView/ReviewsView.js"],"sourcesContent":["import { TailSpin } from 'react-loader-spinner';\n\nfunction Loader() {\n  return <TailSpin height=\"32\" width=\"32\" color=\"black\" ariaLabel=\"loading\" />;\n}\n\nexport default Loader;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieById } from 'services/themovieAPI';\n\nexport function useFetchMovieDetails() {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const movieData = await getMovieById(movieId);\n        setMovieInfo(movieData);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchMovieDetails', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { movieInfo, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getTrendingMovies } from 'services/themovieAPI';\n\nexport function useFetchTrendingMovies() {\n  const [trandMovies, setTrandMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const movies = await getTrendingMovies();\n        setTrandMovies(movies.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchTrendingMovies', error.message);\n        toast.error('Something go wrong by getting trending movies');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovies();\n  }, []);\n\n  return { trandMovies, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getMoviesBySearchQuery } from 'services/themovieAPI';\n\nexport function useFetchSearchMovies(searchQuery) {\n  const [moviesBySearch, setMoviesBySearch] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const movies = await getMoviesBySearchQuery(searchQuery);\n        setMoviesBySearch(movies.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchSearchMovies', error.message);\n        toast.error(`There is no such ${searchQuery} movies`);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovies();\n  }, [searchQuery]);\n\n  return { moviesBySearch, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieCast } from 'services/themovieAPI';\n\nexport function useFetchCast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const actors = await getMovieCast(movieId);\n        setCast(actors.cast);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchCast', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { cast, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getReviews } from 'services/themovieAPI';\n\nexport function useFetchReviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const items = await getReviews(movieId);\n        setReviews(items.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchReviews', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { reviews, loading, error };\n}\n","const key = 'c8a323c75721ee3e8e3a93687086175a';\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nfunction getTrendingMovies() {\n  return fetch(`${baseURL}trending/movie/day?api_key=${key}`).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMovieById(movieId) {\n  return fetch(`${baseURL}movie/${movieId}?api_key=${key}`).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMoviesBySearchQuery(query) {\n  return fetch(\n    `${baseURL}search/movie?api_key=${key}&language=en-US&page=1&query=${query}&include_adult=true`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMovieCast(movieId) {\n  return fetch(\n    `${baseURL}movie/${movieId}/credits?api_key=${key}&language=en-US`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getReviews(movieId) {\n  return fetch(\n    `${baseURL}movie/${movieId}/reviews?api_key=${key}&language=en-US`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nexport {\n  IMAGE_URL,\n  getTrendingMovies,\n  getMovieById,\n  getMoviesBySearchQuery,\n  getMovieCast,\n  getReviews,\n};\n","import styled from 'styled-components';\n\nexport const AuthorName = styled.p`\n  font-size: 18px;\n  color: #203ec4;\n`;\nexport const Text = styled.p`\n  margin: 0;\n  padding: 15px;\n  font-size: 16px;\n  line-height: 1.4;\n  font-weight: 400;\n`;\n","import PropTypes from 'prop-types';\nimport { AuthorName, Text } from './RenderReview.styled';\n\nfunction RenderReview({ data }) {\n  const { author, content } = data;\n  return (\n    <li>\n      <AuthorName>Author: {author}</AuthorName>\n      <Text>{content}</Text>\n      <hr />\n    </li>\n  );\n}\n\nRenderReview.propTypes = {\n  data: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default RenderReview;\n","import styled from 'styled-components';\n\nexport const IsEpsent = styled.p`\n  margin: 0;\n  padding: 15px;\n  font-size: 16px;\n  line-height: 1.4;\n  font-weight: 400;\n`;\n","import Loader from 'components/Loader';\nimport { useFetchReviews } from 'hooks';\nimport RenderReview from 'components/RenderReview';\nimport { IsEpsent } from './ReviewsView.styled';\n\nfunction ReviewsView() {\n  const { reviews, loading } = useFetchReviews();\n\n  return (\n    <>\n      {loading && <Loader />}\n      {reviews.length ? (\n        <ul>\n          {reviews.map(item => (\n            <RenderReview key={item.id} data={item} />\n          ))}\n        </ul>\n      ) : (\n        <IsEpsent>Reviews not found</IsEpsent>\n      )}\n    </>\n  );\n}\n\nexport default ReviewsView;\n"],"names":["height","width","color","ariaLabel","useFetchMovieDetails","movieId","useParams","useState","movieInfo","setMovieInfo","loading","setLoading","error","setError","useEffect","getMovieById","movieData","console","log","message","toast","getMovie","useFetchTrendingMovies","trandMovies","setTrandMovies","getTrendingMovies","movies","results","getMovies","useFetchSearchMovies","searchQuery","moviesBySearch","setMoviesBySearch","getMoviesBySearchQuery","useFetchCast","cast","setCast","getMovieCast","actors","useFetchReviews","reviews","setReviews","getReviews","items","key","baseURL","IMAGE_URL","fetch","then","res","ok","json","query","AuthorName","styled","Text","data","author","content","IsEpsent","Loader","length","map","item","id"],"sourceRoot":""}