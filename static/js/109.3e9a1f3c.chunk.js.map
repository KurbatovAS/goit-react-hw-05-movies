{"version":3,"file":"static/js/109.3e9a1f3c.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","hooks/useFetchMovieDetails.js","hooks/useFetchTrendingMovies.js","hooks/useFetchSearchMovies.js","hooks/useFetchCast.js","hooks/useFetchReviews.js","services/themovieAPI.js","views/HomeView/HomeView.styled.js","views/HomeView/HomeView.js"],"sourcesContent":["import { TailSpin } from 'react-loader-spinner';\n\nfunction Loader() {\n  return <TailSpin height=\"32\" width=\"32\" color=\"black\" ariaLabel=\"loading\" />;\n}\n\nexport default Loader;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const ListItem = styled.li`\n  margin: 20px;\n  padding: 10px;\n  width: 300px;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  background-color: #ffffff;\n  transition: 0.25s;\n`;\n\nexport const Poster = styled.img`\n  width: 300px;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  background-color: #ffffff;\n  transition: 0.25s;\n`;\n\nexport const MovieLink = styled(NavLink)`\n  display: inline-block;\n  text-decoration: none;\n  font-weight: 500;\n  color: #2a363b;\n  font-size: 18px;\n`;\n\nexport const MovieTitle = styled.h2`\n  margin-top: 10px;\n  text-align: center;\n  font-size: 18px;\n  font-weight: 500;\n  text-decoration: none;\n  color: #2e94bb;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { IMAGE_URL } from 'services/themovieAPI';\nimport {\n  ListItem,\n  Poster,\n  MovieLink,\n  MovieTitle,\n} from './MoviesListItem.styled';\n\nfunction MoviesListItem({ movie }) {\n  const { id, title, poster_path, name } = movie;\n  const location = useLocation();\n\n  return (\n    <ListItem>\n      <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n        <Poster\n          src={IMAGE_URL + poster_path}\n          alt={title || name}\n          width=\"300\"\n          height=\"450\"\n        />\n        <MovieTitle>{title}</MovieTitle>\n      </MovieLink>\n    </ListItem>\n  );\n}\n\nMoviesListItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MoviesListItem;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: -20px;\n  text-align: center;\n  list-style: none;\n`;\n","import PropTypes from 'prop-types';\nimport MoviesListItem from 'components/MoviesListItem';\nimport { List } from './MoviesList.styled';\n\nfunction MoviesList({ movies }) {\n  return (\n    <List>\n      {movies.map(movie => {\n        return <MoviesListItem key={movie.id} movie={movie} />;\n      })}\n    </List>\n  );\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.number.isRequired }).isRequired\n  ).isRequired,\n};\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieById } from 'services/themovieAPI';\n\nexport function useFetchMovieDetails() {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const movieData = await getMovieById(movieId);\n        setMovieInfo(movieData);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchMovieDetails', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { movieInfo, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getTrendingMovies } from 'services/themovieAPI';\n\nexport function useFetchTrendingMovies() {\n  const [trandMovies, setTrandMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const movies = await getTrendingMovies();\n        setTrandMovies(movies.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchTrendingMovies', error.message);\n        toast.error('Something go wrong by getting trending movies');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovies();\n  }, []);\n\n  return { trandMovies, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getMoviesBySearchQuery } from 'services/themovieAPI';\n\nexport function useFetchSearchMovies(searchQuery) {\n  const [moviesBySearch, setMoviesBySearch] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const movies = await getMoviesBySearchQuery(searchQuery);\n        setMoviesBySearch(movies.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchSearchMovies', error.message);\n        toast.error(`There is no such ${searchQuery} movies`);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovies();\n  }, [searchQuery]);\n\n  return { moviesBySearch, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieCast } from 'services/themovieAPI';\n\nexport function useFetchCast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const actors = await getMovieCast(movieId);\n        setCast(actors.cast);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchCast', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { cast, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getReviews } from 'services/themovieAPI';\n\nexport function useFetchReviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const items = await getReviews(movieId);\n        setReviews(items.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchReviews', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { reviews, loading, error };\n}\n","const key = 'c8a323c75721ee3e8e3a93687086175a';\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nfunction getTrendingMovies() {\n  return fetch(`${baseURL}trending/movie/day?api_key=${key}`).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMovieById(movieId) {\n  return fetch(`${baseURL}movie/${movieId}?api_key=${key}`).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMoviesBySearchQuery(query) {\n  return fetch(\n    `${baseURL}search/movie?api_key=${key}&language=en-US&page=1&query=${query}&include_adult=true`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMovieCast(movieId) {\n  return fetch(\n    `${baseURL}movie/${movieId}/credits?api_key=${key}&language=en-US`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getReviews(movieId) {\n  return fetch(\n    `${baseURL}movie/${movieId}/reviews?api_key=${key}&language=en-US`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nexport {\n  IMAGE_URL,\n  getTrendingMovies,\n  getMovieById,\n  getMoviesBySearchQuery,\n  getMovieCast,\n  getReviews,\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n  font-size: 30px;\n  font-weight: 700;\n  color: #2e94bb;\n  text-transform: uppercase;\n`;\n","import MoviesList from 'components/MoviesList';\nimport Loader from 'components/Loader';\nimport { useFetchTrendingMovies } from 'hooks';\nimport { Title } from './HomeView.styled';\n\nfunction HomeView() {\n  const { trandMovies, loading } = useFetchTrendingMovies();\n\n  return (\n    <main>\n      <Title>Tranding today</Title>\n      {loading && <Loader />}\n      <MoviesList movies={trandMovies} />\n    </main>\n  );\n}\n\nexport default HomeView;\n"],"names":["height","width","color","ariaLabel","ListItem","styled","Poster","MovieLink","NavLink","MovieTitle","movie","id","title","poster_path","name","location","useLocation","to","state","from","src","IMAGE_URL","alt","List","movies","map","useFetchMovieDetails","movieId","useParams","useState","movieInfo","setMovieInfo","loading","setLoading","error","setError","useEffect","getMovieById","movieData","console","log","message","toast","getMovie","useFetchTrendingMovies","trandMovies","setTrandMovies","getTrendingMovies","results","getMovies","useFetchSearchMovies","searchQuery","moviesBySearch","setMoviesBySearch","getMoviesBySearchQuery","useFetchCast","cast","setCast","getMovieCast","actors","useFetchReviews","reviews","setReviews","getReviews","items","key","baseURL","fetch","then","res","ok","json","query","Title","Loader","MoviesList"],"sourceRoot":""}