{"version":3,"file":"static/js/892.e8d05e3c.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","hooks/useFetchMovieDetails.js","hooks/useFetchTrendingMovies.js","hooks/useFetchSearchMovies.js","hooks/useFetchCast.js","hooks/useFetchReviews.js","services/themovieAPI.js","components/AddInfo/AddInfo.styled.js","components/AddInfo/AddInfo.js","components/RenderMovieDetailsView/RenderMovieDetailsView.styled.js","components/RenderMovieDetailsView/RenderMovieDetailsView.js","views/MovieDetailsView/MovieDetailsView.styled.js","views/MovieDetailsView/MovieDetailsView.js"],"sourcesContent":["import { TailSpin } from 'react-loader-spinner';\n\nfunction Loader() {\n  return <TailSpin height=\"32\" width=\"32\" color=\"black\" ariaLabel=\"loading\" />;\n}\n\nexport default Loader;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieById } from 'services/themovieAPI';\n\nexport function useFetchMovieDetails() {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const movieData = await getMovieById(movieId);\n        setMovieInfo(movieData);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchMovieDetails', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { movieInfo, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getTrendingMovies } from 'services/themovieAPI';\n\nexport function useFetchTrendingMovies() {\n  const [trandMovies, setTrandMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const movies = await getTrendingMovies();\n        setTrandMovies(movies.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchTrendingMovies', error.message);\n        toast.error('Something go wrong by getting trending movies');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovies();\n  }, []);\n\n  return { trandMovies, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getMoviesBySearchQuery } from 'services/themovieAPI';\n\nexport function useFetchSearchMovies(searchQuery) {\n  const [moviesBySearch, setMoviesBySearch] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setLoading(true);\n      try {\n        const movies = await getMoviesBySearchQuery(searchQuery);\n        setMoviesBySearch(movies.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchSearchMovies', error.message);\n        toast.error(`There is no such ${searchQuery} movies`);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovies();\n  }, [searchQuery]);\n\n  return { moviesBySearch, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieCast } from 'services/themovieAPI';\n\nexport function useFetchCast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const actors = await getMovieCast(movieId);\n        setCast(actors.cast);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchCast', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { cast, loading, error };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getReviews } from 'services/themovieAPI';\n\nexport function useFetchReviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovie() {\n      setLoading(true);\n      try {\n        const items = await getReviews(movieId);\n        setReviews(items.results);\n      } catch (error) {\n        setError(error);\n        console.log('ERROR by useFetchReviews', error.message);\n        toast.error('404 - There is no such page');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getMovie();\n  }, [movieId]);\n\n  return { reviews, loading, error };\n}\n","const key = 'c8a323c75721ee3e8e3a93687086175a';\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nfunction getTrendingMovies() {\n  return fetch(`${baseURL}trending/movie/day?api_key=${key}`).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMovieById(movieId) {\n  return fetch(`${baseURL}movie/${movieId}?api_key=${key}`).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMoviesBySearchQuery(query) {\n  return fetch(\n    `${baseURL}search/movie?api_key=${key}&language=en-US&page=1&query=${query}&include_adult=true`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getMovieCast(movieId) {\n  return fetch(\n    `${baseURL}movie/${movieId}/credits?api_key=${key}&language=en-US`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nfunction getReviews(movieId) {\n  return fetch(\n    `${baseURL}movie/${movieId}/reviews?api_key=${key}&language=en-US`\n  ).then(res => {\n    if (!res.ok) {\n      return;\n    }\n    return res.json();\n  });\n}\n\nexport {\n  IMAGE_URL,\n  getTrendingMovies,\n  getMovieById,\n  getMoviesBySearchQuery,\n  getMovieCast,\n  getReviews,\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const InfoHeading = styled.h3`\n  text-align: center;\n  font-size: 18px;\n  color: #203ec4;\n  font-weight: 700;\n`;\n\nexport const Link = styled(NavLink)`\n  display: inline-block;\n  padding: 12px;\n  text-decoration: none;\n  color: #000;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: #203ec4;\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { InfoHeading, Link, List } from './AddInfo.styled';\n\nfunction AddInfo() {\n  const location = useLocation();\n  return (\n    <>\n      <InfoHeading>Additional information</InfoHeading>\n      <List>\n        <li>\n          <Link to={'cast'} state={location.state}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to={'reviews'} state={location.state}>\n            Reviews\n          </Link>\n        </li>\n      </List>\n    </>\n  );\n}\n\nexport default AddInfo;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 20px;\n`;\n\nexport const Poster = styled.img`\n  margin-top: 10px;\n  margin-left: 20px;\n  margin-right: 30px;\n  width: 300px;\n  height: auto;\n`;\n\nexport const MovieTitle = styled.h1`\n  margin-bottom: 25px;\n  font-size: 30px;\n  font-weight: 700;\n  color: #203ec4;\n`;\n\nexport const Info = styled.p`\n  margin: 0;\n  padding: 15px;\n  font-size: 18px;\n  line-height: 1.3;\n  font-weight: 400;\n  color: #203ec4;\n`;\n\nexport const InfoSpan = styled.span`\n  font-weight: 700;\n  color: #203efa;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  Container,\n  Poster,\n  MovieTitle,\n  Info,\n  InfoSpan,\n} from './RenderMovieDetailsView.styled';\n\nfunction RenderMovieDetailsView({ movieInfo }) {\n  const { title, release_date, vote_average, overview, genres, poster_path } =\n    movieInfo;\n  return (\n    <Container>\n      {poster_path ? (\n        <Poster\n          src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n          alt={title}\n        />\n      ) : (\n        <Poster\n          src={`https://upload.wikimedia.org/wikipedia/commons/c/c2/No_image_poster.png`}\n          alt={`There is no poster`}\n        />\n      )}\n      <div>\n        <MovieTitle>\n          {title} ({release_date.slice(0, 4)})\n        </MovieTitle>\n        <Info>\n          <InfoSpan>User Score:</InfoSpan> {vote_average}\n        </Info>\n        <Info>\n          <InfoSpan>Overview:</InfoSpan> {overview}\n        </Info>\n        <Info>\n          <InfoSpan>Genres: </InfoSpan>\n          {genres.map(genre => genre.name).join(', ')}\n        </Info>\n      </div>\n    </Container>\n  );\n}\n\nRenderMovieDetailsView.propTypes = {\n  movieInfo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }),\n};\n\nexport default RenderMovieDetailsView;\n","import styled from 'styled-components';\n\nexport const GoBackBtn = styled.button`\n  cursor: pointer;\n  color: #f0f8ff;\n  background-color: #2196f3;\n  border-radius: 5%;\n  padding: 5px;\n  border-style: hidden;\n`;\n","import { Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport { GiReturnArrow } from 'react-icons/gi';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'components/Loader';\nimport AddInfo from 'components/AddInfo';\nimport RenderMovieDetailsView from 'components/RenderMovieDetailsView';\nimport { useFetchMovieDetails } from 'hooks';\nimport { GoBackBtn } from './MovieDetailsView.styled';\n\nfunction MovieDetailsView() {\n  const { movieInfo, loading } = useFetchMovieDetails();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  function goBack() {\n    navigate(location?.state?.from ?? '/');\n  }\n\n  return (\n    <main>\n      <GoBackBtn type=\"button\" onClick={goBack}>\n        <GiReturnArrow /> Go back\n      </GoBackBtn>\n\n      {loading && <Loader />}\n      {movieInfo && <RenderMovieDetailsView movieInfo={movieInfo} />}\n      <AddInfo />\n      <Outlet />\n    </main>\n  );\n}\n\nexport default MovieDetailsView;\n"],"names":["height","width","color","ariaLabel","useFetchMovieDetails","movieId","useParams","useState","movieInfo","setMovieInfo","loading","setLoading","error","setError","useEffect","getMovieById","movieData","console","log","message","toast","getMovie","useFetchTrendingMovies","trandMovies","setTrandMovies","getTrendingMovies","movies","results","getMovies","useFetchSearchMovies","searchQuery","moviesBySearch","setMoviesBySearch","getMoviesBySearchQuery","useFetchCast","cast","setCast","getMovieCast","actors","useFetchReviews","reviews","setReviews","getReviews","items","key","baseURL","IMAGE_URL","fetch","then","res","ok","json","query","InfoHeading","styled","Link","NavLink","List","location","useLocation","to","state","Container","Poster","MovieTitle","Info","InfoSpan","title","release_date","vote_average","overview","genres","poster_path","src","alt","slice","map","genre","name","join","GoBackBtn","navigate","useNavigate","type","onClick","from","Loader"],"sourceRoot":""}